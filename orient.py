"""
------------------------------------------------------------------------------------------
Elements of AI | Assignment 4 | mkpandey-aparappi-atarfe
------------------------------------------------------------------------------------------
"""

import sys
import re
import math
from collections import defaultdict
import random
import pickle as pickle
import numpy as np
import adaboost1 as adaboost
from knn import *
from forest import *
import datetime

# For testing purposes..remove below line for actual program
sys.argv = ['program_name','train','train-data.txt','model-file.txt', 'adaboost']

# Fetching cmd-line args
train_or_test = sys.argv[1]
input_file = sys.argv[2]
model_file = sys.argv[3]
model = sys.argv[4]

# Read input file into a variable..skips first column with image name
data = np.loadtxt(input_file, usecols=range(1,194))

# All image names stored in separate array
image_names = np.genfromtxt(input_file, dtype="str", usecols=range(0,1))

# Based on the model required, call respective functions
if model == 'best':
    model = 'nearest'
    
if model == 'adaboost':

    #----------------------------------#
    #            TRAINING              #
    #----------------------------------#
    if train_or_test == 'train':
        random_hyp_pairs = []
        hyp_alphas = defaultdict(dict)
        max_iterations = 3
        f = open(model_file, 'wb')

        start = datetime.datetime.now()
        
        # Finding total number of cols in data...Not counting the col with actual labels
        # Since np array lengths are calculated from index 1, have to decrement 1 too
        total_num_of_cols = len(data[0])-2
        
        for i in range(0,max_iterations):
            # Getting two random column indices. Will find difference between row vals
            # of these two columns, which will be our hypothesis while training
            column_1 = random.randint(1,total_num_of_cols)
            column_2 = random.randint(1,total_num_of_cols)

            # Resolving conflict, if any. Shouldn't be the same
            if column_1 == column_2:
                if column_2 != total_num_of_cols:
                    column_2 += 1
                else:
                    column_2 -= 1
                    
            random_hyp_pairs.append((column_1,column_2))

     
        # Running train for the different orientations...
        # Each run will return a dict of dicts with key as particular orientation
        # Pipeline the dicts returned from one training stage to another till we finish.
        # Output will be a dict of dict with 4 keys (0, 90, 180, 270)
        pairs=[(97, 118), (175, 119), (7, 52)] #(179, 12), (78, 26), (4, 135), (113, 152), (26, 126), (121, 129), (44, 111), (170, 108), (93, 185), (122, 157), (19, 167), (145, 33), (176, 68), (138, 68), (39, 108), (162, 1), (32, 22), (5, 146), (142, 53), (126, 30), (39, 145), (114, 41), (138, 52), (177, 164), (31, 90), (51, 159), (106, 106), (171, 95), (52, 58), (149, 188), (22, 78), (112, 182), (118, 192), (108, 3), (107, 38), (101, 170), (28, 22), (88, 185), (24, 123), (182, 98), (16, 179), (121, 125), (51, 120), (39, 83), (50, 68), (76, 182), (84, 38), (55, 21), (61, 169), (188, 165), (131, 154), (76, 147), (7, 147), (173, 4), (44, 93), (48, 58), (11, 63), (37, 87), (62, 130), (109, 114), (103, 190), (84, 80), (80, 116), (0, 1), (123, 54), (109, 168), (43, 115), (182, 152), (86, 192), (148, 159), (46, 58), (27, 162), (161, 0), (170, 48), (125, 129), (15, 84), (135, 93), (19, 5), (175, 72), (18, 108), (73, 51), (150, 40), (14, 181), (30, 183), (175, 92), (66, 190), (51, 27), (94, 126), (103, 100), (166, 167), (67, 163), (42, 104), (167, 89), (122, 137), (166, 86), (185, 51), (41, 172), (24, 83), (75, 13), (21, 171), (77, 49), (11, 172), (185, 92), (170, 14), (188, 175), (55, 108), (71, 142), (142, 10), (127, 175), (61, 88), (105, 107), (156, 160), (187, 66), (98, 80), (56, 24), (128, 57), (30, 144), (137, 105), (171, 49), (180, 48), (36, 142), (157, 167), (128, 18), (23, 99), (33, 5), (125, 42), (114, 80), (149, 175), (22, 25), (52, 14), (109, 29), (73, 161), (182, 74), (72, 145), (149, 94), (155, 105), (132, 11), (71, 95), (44, 31), (9, 99), (6, 137), (37, 55), (26, 72), (172, 172), (190, 78), (88, 130), (4, 182), (120, 69), (176, 126), (56, 89), (146, 139), (90, 126), (177, 8), (122, 113), (128, 47), (93, 76), (106, 5), (79, 88), (91, 24), (41, 73), (72, 89), (54, 169), (49, 99), (110, 92), (26, 116), (93, 26), (74, 127), (123, 134), (144, 14), (80, 124), (36, 32), (73, 44), (158, 109), (94, 52), (162, 167), (149, 70), (150, 133), (39, 88), (76, 7), (44, 34), (34, 17), (156, 165), (180, 131), (35, 129), (180, 108), (176, 43), (138, 162), (180, 189), (138, 146), (4, 94), (147, 10), (172, 174), (57, 135), (138, 168), (158, 173), (73, 167), (65, 56), (41, 15), (35, 59), (137, 181), (8, 113), (30, 89), (96, 162), (191, 88), (174, 23), (151, 165), (145, 25), (62, 171), (77, 171), (52, 132), (123, 98), (112, 17), (18, 146), (106, 163), (51, 11), (139, 80), (67, 95), (95, 190), (12, 58), (5, 29), (75, 70), (40, 21), (47, 28), (132, 62), (162, 44), (59, 163), (3, 39), (17, 78), (57, 62), (189, 99), (23, 56), (82, 124), (139, 175), (18, 32), (185, 80), (182, 52), (143, 142), (7, 88), (151, 73), (110, 125), (154, 36), (144, 72), (85, 133), (100, 71), (30, 51), (16, 120), (116, 0), (24, 51), (182, 60), (0, 124), (79, 58), (132, 151), (164, 156), (173, 182), (41, 94), (121, 81), (6, 48), (180, 136), (38, 60), (108, 86), (10, 9), (135, 173), (147, 122), (44, 179), (67, 98), (40, 107), (133, 184), (16, 174), (175, 46), (48, 76), (55, 76), (144, 37), (88, 134), (101, 50), (13, 19), (184, 35), (7, 177), (123, 14), (188, 52), (0, 24), (89, 146), (149, 79), (120, 154), (86, 17), (36, 102), (156, 132), (63, 34), (10, 88), (22, 85), (172, 159), (153, 113), (111, 2), (9, 25), (44, 147), (6, 176), (108, 77), (102, 40), (143, 168), (111, 9), (143, 18), (85, 119), (190, 117), (91, 45), (17, 15), (126, 66), (179, 46), (18, 130), (99, 110), (145, 15), (25, 108), (58, 59), (69, 89), (100, 1), (85, 31), (122, 102), (54, 130), (42, 115), (162, 30), (168, 59), (173, 13), (51, 148), (117, 71), (15, 180), (24, 169), (63, 183), (42, 172), (71, 126), (47, 136), (87, 165), (173, 176), (164, 189), (31, 90), (166, 79), (8, 73), (62, 112), (60, 81), (1, 122), (24, 42), (168, 178), (47, 75), (20, 148), (108, 86), (29, 75), (170, 128), (26, 62), (187, 67), (7, 55), (190, 28), (157, 39), (36, 62), (186, 17), (161, 39), (17, 105), (169, 64), (150, 170), (2, 116), (109, 115), (138, 107), (145, 108), (0, 153), (7, 106), (87, 7), (165, 83), (115, 30), (24, 39), (59, 15), (39, 89), (188, 142), (152, 25), (22, 74), (119, 176), (191, 123), (180, 79), (177, 100), (90, 159), (91, 26), (129, 170), (89, 151), (139, 73), (169, 43), (115, 47), (5, 155), (183, 53), (98, 12), (190, 154), (5, 112), (119, 37), (73, 17), (92, 22), (137, 18), (106, 1), (131, 162), (183, 100), (179, 147), (29, 140), (170, 1), (88, 107), (168, 50), (38, 37), (86, 37), (93, 13), (1, 189), (8, 90), (59, 76), (159, 121), (9, 180), (101, 103), (173, 105), (124, 97), (186, 100), (15, 35), (11, 132), (54, 129), (42, 69), (35, 151), (166, 172), (115, 122), (171, 17), (55, 44), (131, 82), (118, 92), (102, 47), (129, 109), (39, 56), (104, 85), (91, 134), (139, 55), (122, 160), (190, 190), (80, 172), (4, 153), (64, 157), (90, 136), (157, 143), (158, 110), (170, 15), (93, 189), (137, 89), (70, 120), (58, 71), (135, 0), (68, 72), (11, 119), (28, 126), (122, 35), (70, 112), (144, 95), (158, 182), (186, 69), (84, 3), (62, 192), (125, 85), (172, 56), (81, 11), (160, 183), (19, 178), (114, 81), (130, 27), (117, 128), (34, 168), (125, 84), (180, 83), (97, 22), (18, 15), (146, 86), (118, 26), (46, 147), (117, 148), (1, 123), (192, 150), (132, 68), (103, 165), (46, 151), (158, 148), (59, 176), (93, 0), (90, 187), (62, 187), (112, 55), (26, 156), (63, 163), (164, 47), (163, 175), (51, 65), (113, 124), (167, 122), (169, 52), (172, 3), (24, 148), (185, 2), (119, 119), (95, 66), (118, 105), (161, 121), (145, 169), (84, 91), (108, 33), (37, 16), (143, 91), (71, 39), (66, 140), (73, 46), (36, 70), (154, 47), (44, 129), (37, 121), (48, 82), (58, 174), (136, 138), (92, 98), (33, 121), (25, 31), (30, 2), (161, 112), (169, 35), (69, 133), (116, 139), (68, 161), (131, 38), (4, 172), (37, 99), (43, 41), (155, 184), (118, 47), (47, 23), (132, 61), (48, 131), (163, 53), (59, 44), (8, 96), (65, 167), (98, 36), (176, 39), (50, 111), (60, 40), (141, 27), (137, 127), (15, 81), (178, 74), (166, 4), (12, 162), (47, 89), (179, 81), (161, 68), (63, 164), (68, 159), (2, 112), (106, 117), (92, 59), (13, 81), (7, 52), (189, 108), (136, 36), (18, 38), (166, 34), (106, 30), (9, 172), (113, 166), (27, 105), (80, 51), (99, 51), (16, 7), (158, 93), (77, 186), (107, 25), (104, 59), (179, 161), (61, 182), (56, 104), (34, 111), (5, 43), (51, 157), (88, 36), (179, 173), (175, 4), (42, 70), (67, 167), (73, 2), (71, 142), (51, 190), (148, 121), (24, 61), (128, 36), (54, 96), (0, 98), (132, 126), (86, 93), (52, 152), (118, 89), (140, 183), (6, 92), (78, 187), (122, 19), (164, 9), (188, 167), (139, 81), (161, 179), (103, 88), (186, 69), (103, 81), (44, 137), (18, 151), (44, 140), (82, 72), (161, 8), (185, 86), (142, 191), (9, 183), (10, 143), (5, 25), (63, 99), (102, 12), (113, 189), (135, 152), (109, 120), (89, 43), (17, 158), (184, 66), (30, 150), (156, 30), (189, 10), (15, 123), (39, 77), (159, 49), (189, 186), (30, 84), (118, 46), (85, 191), (183, 33), (9, 145), (175, 149), (96, 159), (97, 55), (157, 178), (52, 20), (142, 40), (32, 63), (94, 30), (104, 96), (106, 53), (79, 78), (38, 180), (40, 28), (148, 82), (150, 170), (177, 12), (139, 18), (88, 16), (31, 181), (15, 83), (6, 120), (53, 14), (42, 134), (47, 21), (163, 93), (136, 133), (176, 158), (33, 22), (66, 185), (54, 112), (125, 39), (130, 126), (176, 47), (173, 101), (101, 132), (7, 39), (105, 99), (64, 28), (41, 191), (10, 40), (47, 161), (90, 145), (36, 32), (158, 49), (23, 176), (152, 69), (170, 111), (70, 190), (180, 170), (52, 136), (26, 182), (113, 156), (121, 159), (4, 31), (71, 136), (185, 171), (55, 19), (83, 85), (99, 111), (136, 183), (30, 7), (51, 71), (145, 187), (40, 23), (98, 152), (29, 34), (25, 45), (15, 106), (154, 145), (104, 45), (142, 59), (30, 17), (118, 123), (125, 54), (17, 82), (145, 30), (56, 47), (19, 144), (68, 113), (158, 114), (58, 158), (42, 116), (2, 102), (120, 108), (10, 24), (108, 130), (61, 7), (104, 99), (122, 120), (86, 102), (108, 96), (92, 167), (131, 136), (183, 92), (165, 53), (99, 151), (73, 171), (40, 134), (89, 143), (106, 137), (42, 112), (33, 166), (105, 51), (126, 24), (175, 185), (122, 54), (149, 98), (33, 164), (110, 33), (183, 188), (6, 150), (188, 0), (16, 152), (72, 93), (149, 184), (74, 60), (140, 141), (32, 93), (113, 131), (154, 84), (107, 104), (97, 184), (73, 110), (104, 119), (81, 184), (138, 173), (131, 184), (92, 24), (6, 147), (188, 41), (137, 46), (131, 54), (116, 10), (83, 1), (48, 116), (186, 26), (33, 16), (165, 179), (33, 123), (60, 62), (119, 129), (22, 44), (77, 144), (65, 51), (82, 142), (174, 188), (92, 94), (18, 83), (134, 31), (129, 48), (30, 80), (44, 139), (61, 192), (24, 64), (33, 144), (84, 116), (31, 52), (27, 61), (32, 119), (62, 122), (144, 70), (95, 134), (110, 20), (9, 94), (182, 23), (122, 154), (17, 163), (16, 58), (52, 131), (110, 181), (55, 176), (102, 58), (10, 54), (79, 58), (141, 143), (93, 139), (173, 19), (17, 59), (118, 123), (96, 148), (50, 152), (147, 72), (158, 171), (23, 184), (165, 117), (182, 183), (16, 84), (158, 3), (131, 120), (134, 186), (147, 179), (57, 133), (38, 170), (26, 102), (145, 129), (95, 116), (186, 102), (150, 9), (165, 1), (190, 39), (146, 81), (94, 31), (88, 114), (157, 94), (49, 17), (54, 63), (87, 96), (155, 150), (18, 143), (88, 180), (92, 69), (6, 50), (44, 159), (123, 117), (115, 50), (13, 83), (84, 84), (96, 146), (57, 13), (109, 159), (82, 145), (78, 152), (136, 46), (170, 168), (122, 74), (96, 172), (14, 109), (9, 128), (114, 44), (143, 35), (73, 53), (127, 89), (45, 24), (23, 38), (86, 171), (136, 61), (16, 98), (73, 188), (147, 57), (37, 134), (160, 35), (126, 77), (157, 52), (50, 39), (135, 8), (167, 39), (102, 130), (6, 34), (17, 159), (134, 19), (122, 75), (126, 131), (149, 147), (47, 123), (157, 172), (88, 177), (50, 166), (106, 113), (157, 18), (125, 174), (155, 49), (186, 159), (61, 64), (57, 160), (95, 148), (17, 121), (41, 41), (110, 172), (94, 142), (31, 5), (133, 73), (159, 46), (82, 54), (151, 45), (173, 22), (52, 58), (165, 17), (70, 97), (165, 125), (29, 107), (46, 65), (9, 132), (84, 97), (21, 93), (94, 58), (84, 28), (169, 19), (0, 12), (38, 60), (52, 165), (50, 130), (145, 115), (105, 45), (180, 69), (70, 134), (71, 23), (88, 41), (95, 85), (52, 106), (37, 21), (161, 83), (119, 89), (12, 16), (156, 53), (84, 116), (117, 17), (79, 3), (66, 3), (112, 91), (32, 86), (51, 59), (42, 139), (28, 143), (22, 5), (59, 150), (115, 158), (71, 68), (153, 0), (184, 43), (122, 38), (127, 109), (8, 34), (48, 95), (61, 33), (141, 81), (74, 178), (49, 34), (54, 2), (191, 19), (49, 135), (154, 91), (47, 6), (85, 0), (26, 30), (180, 43), (13, 179), (65, 15), (18, 176), (96, 86), (100, 48), (62, 92), (58, 3), (144, 15), (154, 80), (76, 79), (105, 182), (125, 119), (161, 26), (60, 92), (174, 27), (174, 3), (172, 47), (56, 39), (71, 182), (190, 33), (59, 5), (28, 177), (60, 81), (122, 141), (105, 68), (113, 66), (131, 29), (16, 40), (150, 4), (91, 60), (145, 42), (11, 66), (106, 61), (147, 187), (173, 124), (24, 81), (64, 184), (150, 20), (46, 129), (93, 10), (43, 189), (154, 159), (182, 176), (180, 11), (111, 177), (46, 56), (36, 179), (124, 82), (94, 110), (109, 168), (51, 59), (1, 149), (51, 100), (46, 48), (147, 38), (172, 149), (35, 80), (46, 166), (100, 46), (155, 124), (142, 146), (111, 166), (111, 43), (187, 87), (43, 32), (174, 130), (40, 91), (175, 85), (150, 106), (173, 9), (47, 67), (30, 54), (142, 42), (125, 138), (148, 35), (150, 106), (73, 149), (183, 29), (188, 70), (117, 6), (77, 56), (15, 4), (182, 44), (23, 85), (177, 123), (162, 134), (142, 42), (174, 4), (47, 27), (131, 127), (54, 98), (117, 107), (74, 164), (110, 51), (59, 94), (131, 40), (150, 90), (51, 71), (30, 80), (61, 132), (157, 7), (22, 85), (38, 47), (58, 32), (70, 119), (108, 24), (65, 191), (39, 161), (8, 141), (67, 0), (137, 103), (112, 87), (81, 79), (46, 75), (120, 180), (0, 123), (27, 21), (92, 155), (85, 127), (21, 66), (67, 100), (112, 156), (77, 93), (84, 142), (39, 96), (158, 90), (74, 72), (57, 130), (107, 65), (180, 140), (21, 176), (87, 99), (142, 119), (60, 47), (77, 138), (174, 37), (93, 128), (94, 168), (144, 44), (102, 178), (65, 120), (149, 131), (62, 120), (83, 23), (34, 70), (104, 63), (157, 184), (105, 1), (57, 149), (192, 84), (156, 40), (36, 86), (127, 22), (170, 143), (40, 145), (27, 106), (174, 38), (69, 15), (190, 111), (46, 69), (112, 143), (130, 20), (48, 11), (87, 92), (125, 16), (132, 60), (122, 46), (152, 37), (90, 135), (137, 41), (152, 113), (144, 106), (22, 163), (33, 96), (129, 6), (125, 181), (19, 44), (161, 143), (17, 150), (28, 53), (100, 161), (5, 184), (52, 113), (79, 72), (32, 89), (62, 89), (57, 184), (24, 149), (51, 181), (26, 87), (22, 51), (56, 30), (80, 131), (2, 10), (67, 12), (171, 36), (142, 25), (80, 25), (134, 121), (28, 110), (104, 104), (162, 184), (21, 77), (4, 146), (49, 97), (40, 27), (123, 175), (75, 30), (28, 73), (148, 153), (90, 17), (126, 37), (52, 108), (141, 73), (111, 125), (188, 187), (111, 32), (153, 15), (153, 81), (27, 78), (43, 155), (143, 192), (145, 108), (71, 139), (64, 98), (67, 169), (135, 54), (4, 173), (177, 167), (146, 190), (58, 50), (150, 61)]

        print("Max iterations set to: ", max_iterations)
        alphas_for_0 = adaboost.train(data, 0, pairs, max_iterations, hyp_alphas)
        alphas_for_90 = adaboost.train(data, 90, pairs, max_iterations, alphas_for_0)
        alphas_for_180 = adaboost.train(data, 180, pairs, max_iterations, alphas_for_90)
        alphas_for_270 = adaboost.train(data, 270, pairs, max_iterations, alphas_for_180)

        
        # Storing model params in a pickle to retain dictionary structure
        pickle.dump(alphas_for_270, f, protocol=pickle.HIGHEST_PROTOCOL)
        end = datetime.datetime.now()

        print("Finished training in", end-start)
        # Training ends....
        f.close()
        
    #----------------------------------#
    #            TESTING               #
    #----------------------------------#
    elif train_or_test == 'test':      
        f = open(model_file, 'rb')
        hyp_alphas = pickle.load(f)
        adaboost.test(data, hyp_alphas, image_names)
        f.close()
        
    
elif model == 'nearest':
    print('K Nearest Neighbors model')

elif model == 'forest':
    print('Decision Trees')


